generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-sqlite"
}

datasource db {
  provider = "sqlite"
  url      = "file:./sqlite-database.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String     @default("user")
  phone         String?
  avatar        String?
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLogin     DateTime?

  accounts    Account[]
  sessions    Session[]
  assignedTasks Task[]   @relation("AssignedUser")
  createdTasks  Task[]   @relation("CreatedByUser")
  orders        Order[]
  documents     Document[]
  activities    Activity[]
  
  // Todo relations
  todoListsCreated   TodoList[]       @relation("TodoListCreatedBy")
  todosCreated      TodoItem[]       @relation("TodoCreatedBy")
  todosAssigned     TodoItem[]       @relation("TodoAssignedTo")
  todoAttachments   TodoAttachment[] @relation("TodoAttachmentUploadedBy")
  todoComments      TodoComment[]    @relation("TodoCommentAuthor")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  category    String?
  dueDate     DateTime?
  assignedToId String?
  createdById String
  orderId     String?
  attachments String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignedTo User?  @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy  User   @relation("CreatedByUser", fields: [createdById], references: [id])
  order      Order? @relation(fields: [orderId], references: [id])

  @@map("tasks")
}

model Order {
  id           String    @id @default(cuid())
  orderNumber  String    @unique
  client       String
  product      String
  quantity     Int
  shipDate     DateTime
  status       String    @default("PENDING")
  progress     Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String

  createdBy User @relation(fields: [createdById], references: [id])
  tasks     Task[]
  documents Document[]

  @@map("orders")
}

model Document {
  id           String   @id @default(cuid())
  name         String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  category     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById String
  orderId      String?

  order      Order? @relation(fields: [orderId], references: [id])
  uploadedBy User   @relation(fields: [uploadedById], references: [id])

  @@map("documents")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  metadata    String?
  createdAt   DateTime @default(now())
  userId      String

  user User @relation(fields: [userId], references: [id])

  @@map("activities")
}

// Todo List Models
model TodoList {
  id          String      @id @default(cuid())
  name        String
  description String?
  color       String      @default("#3B82F6") // Default blue color
  icon        String      @default("üìù")
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation("TodoListCreatedBy", fields: [createdById], references: [id])
  todos       TodoItem[]

  @@map("todo_lists")
}

model TodoItem {
  id              String           @id @default(cuid())
  title           String
  description     String?
  status          TodoStatus       @default(PENDING)
  priority        TodoPriority     @default(MEDIUM)
  startDate       DateTime?
  dueDate         DateTime?
  completedAt     DateTime?
  estimatedHours  Int?             // Estimated time to complete
  actualHours     Int?             // Actual time spent
  progress        Int              @default(0) // 0-100 percentage
  tags            String           @default("[]") // SQLite doesn't support arrays, use JSON string
  isDelayed       Boolean          @default(false)
  delayReason     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  todoListId      String
  todoList        TodoList         @relation(fields: [todoListId], references: [id], onDelete: Cascade)
  assignedToId    String?
  assignedTo      User?            @relation("TodoAssignedTo", fields: [assignedToId], references: [id])
  createdById     String
  createdBy       User             @relation("TodoCreatedBy", fields: [createdById], references: [id])
  
  // Dependencies
  dependencies    TodoDependency[] @relation("TodoDependsOn")
  dependents      TodoDependency[] @relation("TodoBlockedBy")
  
  // Attachments and comments
  attachments     TodoAttachment[]
  comments        TodoComment[]

  @@map("todo_items")
}

model TodoDependency {
  id            String   @id @default(cuid())
  type          DependencyType @default(FINISH_TO_START)
  lagDays       Int      @default(0) // Number of days delay/lead time
  createdAt     DateTime @default(now())
  dependsOnId   String   // The todo that must be completed first
  dependsOn     TodoItem @relation("TodoDependsOn", fields: [dependsOnId], references: [id], onDelete: Cascade)
  blockedById   String   // The todo that is blocked
  blockedBy     TodoItem @relation("TodoBlockedBy", fields: [blockedById], references: [id], onDelete: Cascade)

  @@unique([dependsOnId, blockedById])
  @@map("todo_dependencies")
}

model TodoAttachment {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime @default(now())
  todoItemId  String
  todoItem    TodoItem @relation(fields: [todoItemId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation("TodoAttachmentUploadedBy", fields: [uploadedById], references: [id])

  @@map("todo_attachments")
}

model TodoComment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  todoItemId String
  todoItem   TodoItem @relation(fields: [todoItemId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation("TodoCommentAuthor", fields: [authorId], references: [id])

  @@map("todo_comments")
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
  DELAYED
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum DependencyType {
  FINISH_TO_START  // Task A must finish before Task B can start
  START_TO_START   // Task A must start before Task B can start
  FINISH_TO_FINISH // Task A must finish before Task B can finish
  START_TO_FINISH  // Task A must start before Task B can finish
}